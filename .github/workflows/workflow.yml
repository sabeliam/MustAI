name: Deploy

env:
    DOCKER_IMAGE_BACK: mustai-back
    DOCKER_IMAGE_FRONT: mustai-front

on:
    # Runs on pushes targeting the default branch
    push:
        branches: [ "main" ]
        tags: [ 'v*' ]

    pull_request:
        branches: [ "main" ]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

# Allow one concurrent deployment
concurrency:
    group: "pages"
    cancel-in-progress: true

jobs:
    build-front:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v3

            -   name: Build and save Docker images
                run: |
                    docker build --tag $DOCKER_IMAGE_FRONT --file build/docker/front.build.dockerfile .
                    docker save $DOCKER_IMAGE_FRONT > $DOCKER_IMAGE_FRONT.tar

            -   name: Upload artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: my-artifacts
                    path: ${{env.DOCKER_IMAGE_FRONT}}.tar

    build-back:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v3

            -   name: Build and save Docker images
                run: |
                    docker build --tag $DOCKER_IMAGE_BACK --file build/docker/back.build.dockerfile .
                    docker save $DOCKER_IMAGE_BACK > $DOCKER_IMAGE_BACK.tar

            -   name: Upload artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: my-artifacts
                    path: ${{env.DOCKER_IMAGE_BACK}}.tar

    deploy:
        needs: [ build-front, build-back ]
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v3

            -   name: Download artifacts
                uses: actions/download-artifact@v3
                with:
                    name: my-artifacts
                    path: artifacts

            -   name: Copy docker-compose.yml to server
                uses: appleboy/scp-action@master
                with:
                    host: ${{ secrets.VPS_HOST }}
                    username: ${{ secrets.VPS_USERNAME }}
                    password: ${{ secrets.VPS_PASSWORD }}
                    port: ${{ secrets.VPS_PORT }}
                    source: ./build/docker-compose.prod.yml
                    target: /home/${{ secrets.VPS_USERNAME }}/app/docker-compose.prod.yml


            -   name: Copy back artifact to server
                uses: appleboy/scp-action@master
                with:
                    host: ${{ secrets.VPS_HOST }}
                    username: ${{ secrets.VPS_USERNAME }}
                    password: ${{ secrets.VPS_PASSWORD }}
                    port: ${{ secrets.VPS_PORT }}
                    source: ./artifacts/${{env.DOCKER_IMAGE_BACK}}.tar
                    target: /home/${{ secrets.VPS_USERNAME }}/app/${{env.DOCKER_IMAGE_BACK}}.tar

            -   name: Copy front artifact to server
                uses: appleboy/scp-action@master
                with:
                    host: ${{ secrets.VPS_HOST }}
                    username: ${{ secrets.VPS_USERNAME }}
                    password: ${{ secrets.VPS_PASSWORD }}
                    port: ${{ secrets.VPS_PORT }}
                    source: ./artifacts/${{env.DOCKER_IMAGE_FRONT}}.tar
                    target: /home/${{ secrets.VPS_USERNAME }}/app/${{env.DOCKER_IMAGE_FRONT}}.tar

            -   name: Compile and deploy
                uses: appleboy/ssh-action@v0.1.8
                with:
                    host: ${{ secrets.VPS_HOST }}
                    username: ${{ secrets.VPS_USERNAME }}
                    password: ${{ secrets.VPS_PASSWORD }}
                    script: |
                        cd /home/${{ secrets.VPS_USERNAME }}/app
                        docker load -i ${{ env.DOCKER_IMAGE_FRONT }}.tar
                        docker load -i ${{ env.DOCKER_IMAGE_BACK }}.tar
                        docker compose up -d
                env:
                    DOCKER_IMAGE_BACK: ${{ env.DOCKER_IMAGE_BACK }}
                    DOCKER_IMAGE_FRONT: ${{ env.DOCKER_IMAGE_FRONT }}
